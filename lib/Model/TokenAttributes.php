<?php
/**
 * TokenAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  ProcessMaker\PMIO
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ProcessMaker\PMIO\Model;

use \ArrayAccess;

/**
 * TokenAttributes Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ProcessMaker\PMIO
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TokenAttributes implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Token_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'instance_id' => 'string',
        'flow_id' => 'string',
        'token_key' => 'string',
        'token_count' => 'int',
        'initiator_object_id' => 'string',
        'initiator_object_type' => 'string',
        'target_object_id' => 'string',
        'target_object_type' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'instance_id' => 'instance_id',
        'flow_id' => 'flow_id',
        'token_key' => 'token_key',
        'token_count' => 'token_count',
        'initiator_object_id' => 'initiator_object_id',
        'initiator_object_type' => 'initiator_object_type',
        'target_object_id' => 'target_object_id',
        'target_object_type' => 'target_object_type',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'instance_id' => 'setInstanceId',
        'flow_id' => 'setFlowId',
        'token_key' => 'setTokenKey',
        'token_count' => 'setTokenCount',
        'initiator_object_id' => 'setInitiatorObjectId',
        'initiator_object_type' => 'setInitiatorObjectType',
        'target_object_id' => 'setTargetObjectId',
        'target_object_type' => 'setTargetObjectType',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'instance_id' => 'getInstanceId',
        'flow_id' => 'getFlowId',
        'token_key' => 'getTokenKey',
        'token_count' => 'getTokenCount',
        'initiator_object_id' => 'getInitiatorObjectId',
        'initiator_object_type' => 'getInitiatorObjectType',
        'target_object_id' => 'getTargetObjectId',
        'target_object_type' => 'getTargetObjectType',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['flow_id'] = isset($data['flow_id']) ? $data['flow_id'] : null;
        $this->container['token_key'] = isset($data['token_key']) ? $data['token_key'] : null;
        $this->container['token_count'] = isset($data['token_count']) ? $data['token_count'] : null;
        $this->container['initiator_object_id'] = isset($data['initiator_object_id']) ? $data['initiator_object_id'] : null;
        $this->container['initiator_object_type'] = isset($data['initiator_object_type']) ? $data['initiator_object_type'] : null;
        $this->container['target_object_id'] = isset($data['target_object_id']) ? $data['target_object_id'] : null;
        $this->container['target_object_type'] = isset($data['target_object_type']) ? $data['target_object_type'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['instance_id'] === null) {
            $invalid_properties[] = "'instance_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['instance_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets instance_id
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     * @param string $instance_id
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets flow_id
     * @return string
     */
    public function getFlowId()
    {
        return $this->container['flow_id'];
    }

    /**
     * Sets flow_id
     * @param string $flow_id
     * @return $this
     */
    public function setFlowId($flow_id)
    {
        $this->container['flow_id'] = $flow_id;

        return $this;
    }

    /**
     * Gets token_key
     * @return string
     */
    public function getTokenKey()
    {
        return $this->container['token_key'];
    }

    /**
     * Sets token_key
     * @param string $token_key
     * @return $this
     */
    public function setTokenKey($token_key)
    {
        $this->container['token_key'] = $token_key;

        return $this;
    }

    /**
     * Gets token_count
     * @return int
     */
    public function getTokenCount()
    {
        return $this->container['token_count'];
    }

    /**
     * Sets token_count
     * @param int $token_count
     * @return $this
     */
    public function setTokenCount($token_count)
    {
        $this->container['token_count'] = $token_count;

        return $this;
    }

    /**
     * Gets initiator_object_id
     * @return string
     */
    public function getInitiatorObjectId()
    {
        return $this->container['initiator_object_id'];
    }

    /**
     * Sets initiator_object_id
     * @param string $initiator_object_id
     * @return $this
     */
    public function setInitiatorObjectId($initiator_object_id)
    {
        $this->container['initiator_object_id'] = $initiator_object_id;

        return $this;
    }

    /**
     * Gets initiator_object_type
     * @return string
     */
    public function getInitiatorObjectType()
    {
        return $this->container['initiator_object_type'];
    }

    /**
     * Sets initiator_object_type
     * @param string $initiator_object_type
     * @return $this
     */
    public function setInitiatorObjectType($initiator_object_type)
    {
        $this->container['initiator_object_type'] = $initiator_object_type;

        return $this;
    }

    /**
     * Gets target_object_id
     * @return string
     */
    public function getTargetObjectId()
    {
        return $this->container['target_object_id'];
    }

    /**
     * Sets target_object_id
     * @param string $target_object_id
     * @return $this
     */
    public function setTargetObjectId($target_object_id)
    {
        $this->container['target_object_id'] = $target_object_id;

        return $this;
    }

    /**
     * Gets target_object_type
     * @return string
     */
    public function getTargetObjectType()
    {
        return $this->container['target_object_type'];
    }

    /**
     * Sets target_object_type
     * @param string $target_object_type
     * @return $this
     */
    public function setTargetObjectType($target_object_type)
    {
        $this->container['target_object_type'] = $target_object_type;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ProcessMaker\PMIO\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ProcessMaker\PMIO\ObjectSerializer::sanitizeForSerialization($this));
    }
}


