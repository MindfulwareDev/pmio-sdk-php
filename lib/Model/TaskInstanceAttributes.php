<?php
/**
 * TaskInstanceAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  ProcessMaker\PMIO
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ProcessMaker\PMIO\Model;

use \ArrayAccess;

/**
 * TaskInstanceAttributes Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ProcessMaker\PMIO
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaskInstanceAttributes implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TaskInstance_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'task_id' => 'string',
        'instance_id' => 'string',
        'group_id' => 'string',
        'user_id' => 'string',
        'status' => 'string',
        'priority' => 'string',
        'delegate_date' => 'string',
        'start_date' => 'string',
        'finish_date' => 'string',
        'task_due_date' => 'string',
        'risk_date' => 'string',
        'duration' => 'int',
        'instance_overdue_percentage' => 'double',
        'data' => 'string',
        'content' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'task_id' => 'task_id',
        'instance_id' => 'instance_id',
        'group_id' => 'group_id',
        'user_id' => 'user_id',
        'status' => 'status',
        'priority' => 'priority',
        'delegate_date' => 'delegate_date',
        'start_date' => 'start_date',
        'finish_date' => 'finish_date',
        'task_due_date' => 'task_due_date',
        'risk_date' => 'risk_date',
        'duration' => 'duration',
        'instance_overdue_percentage' => 'instance_overdue_percentage',
        'data' => 'data',
        'content' => 'content',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'task_id' => 'setTaskId',
        'instance_id' => 'setInstanceId',
        'group_id' => 'setGroupId',
        'user_id' => 'setUserId',
        'status' => 'setStatus',
        'priority' => 'setPriority',
        'delegate_date' => 'setDelegateDate',
        'start_date' => 'setStartDate',
        'finish_date' => 'setFinishDate',
        'task_due_date' => 'setTaskDueDate',
        'risk_date' => 'setRiskDate',
        'duration' => 'setDuration',
        'instance_overdue_percentage' => 'setInstanceOverduePercentage',
        'data' => 'setData',
        'content' => 'setContent',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'task_id' => 'getTaskId',
        'instance_id' => 'getInstanceId',
        'group_id' => 'getGroupId',
        'user_id' => 'getUserId',
        'status' => 'getStatus',
        'priority' => 'getPriority',
        'delegate_date' => 'getDelegateDate',
        'start_date' => 'getStartDate',
        'finish_date' => 'getFinishDate',
        'task_due_date' => 'getTaskDueDate',
        'risk_date' => 'getRiskDate',
        'duration' => 'getDuration',
        'instance_overdue_percentage' => 'getInstanceOverduePercentage',
        'data' => 'getData',
        'content' => 'getContent',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_INITIAL = 'INITIAL';
    const STATUS_DELEGATED = 'DELEGATED';
    const STATUS_STARTED = 'STARTED';
    const STATUS_CANCELLED = 'CANCELLED';
    const STATUS_FINISHED = 'FINISHED';
    const STATUS_COMPLETE = 'COMPLETE';
    const STATUS_PAUSED = 'PAUSED';
    const PRIORITY__1 = '1';
    const PRIORITY__2 = '2';
    const PRIORITY__3 = '3';
    const PRIORITY__4 = '4';
    const PRIORITY__5 = '5';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INITIAL,
            self::STATUS_DELEGATED,
            self::STATUS_STARTED,
            self::STATUS_CANCELLED,
            self::STATUS_FINISHED,
            self::STATUS_COMPLETE,
            self::STATUS_PAUSED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY__1,
            self::PRIORITY__2,
            self::PRIORITY__3,
            self::PRIORITY__4,
            self::PRIORITY__5,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'INITIAL';
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : '3';
        $this->container['delegate_date'] = isset($data['delegate_date']) ? $data['delegate_date'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['finish_date'] = isset($data['finish_date']) ? $data['finish_date'] : null;
        $this->container['task_due_date'] = isset($data['task_due_date']) ? $data['task_due_date'] : null;
        $this->container['risk_date'] = isset($data['risk_date']) ? $data['risk_date'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['instance_overdue_percentage'] = isset($data['instance_overdue_percentage']) ? $data['instance_overdue_percentage'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['task_id'] === null) {
            $invalid_properties[] = "'task_id' can't be null";
        }
        if ($this->container['instance_id'] === null) {
            $invalid_properties[] = "'instance_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = array("INITIAL", "DELEGATED", "STARTED", "CANCELLED", "FINISHED", "COMPLETE", "PAUSED");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        if ($this->container['priority'] === null) {
            $invalid_properties[] = "'priority' can't be null";
        }
        $allowed_values = array("1", "2", "3", "4", "5");
        if (!in_array($this->container['priority'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'priority', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['task_id'] === null) {
            return false;
        }
        if ($this->container['instance_id'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = array("INITIAL", "DELEGATED", "STARTED", "CANCELLED", "FINISHED", "COMPLETE", "PAUSED");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        if ($this->container['priority'] === null) {
            return false;
        }
        $allowed_values = array("1", "2", "3", "4", "5");
        if (!in_array($this->container['priority'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets task_id
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     * @param string $task_id
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets instance_id
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     * @param string $instance_id
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets group_id
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     * @param string $group_id
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('INITIAL', 'DELEGATED', 'STARTED', 'CANCELLED', 'FINISHED', 'COMPLETE', 'PAUSED');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'INITIAL', 'DELEGATED', 'STARTED', 'CANCELLED', 'FINISHED', 'COMPLETE', 'PAUSED'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets priority
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param string $priority
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowed_values = array('1', '2', '3', '4', '5');
        if (!in_array($priority, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'priority', must be one of '1', '2', '3', '4', '5'");
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets delegate_date
     * @return string
     */
    public function getDelegateDate()
    {
        return $this->container['delegate_date'];
    }

    /**
     * Sets delegate_date
     * @param string $delegate_date
     * @return $this
     */
    public function setDelegateDate($delegate_date)
    {
        $this->container['delegate_date'] = $delegate_date;

        return $this;
    }

    /**
     * Gets start_date
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param string $start_date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets finish_date
     * @return string
     */
    public function getFinishDate()
    {
        return $this->container['finish_date'];
    }

    /**
     * Sets finish_date
     * @param string $finish_date
     * @return $this
     */
    public function setFinishDate($finish_date)
    {
        $this->container['finish_date'] = $finish_date;

        return $this;
    }

    /**
     * Gets task_due_date
     * @return string
     */
    public function getTaskDueDate()
    {
        return $this->container['task_due_date'];
    }

    /**
     * Sets task_due_date
     * @param string $task_due_date
     * @return $this
     */
    public function setTaskDueDate($task_due_date)
    {
        $this->container['task_due_date'] = $task_due_date;

        return $this;
    }

    /**
     * Gets risk_date
     * @return string
     */
    public function getRiskDate()
    {
        return $this->container['risk_date'];
    }

    /**
     * Sets risk_date
     * @param string $risk_date
     * @return $this
     */
    public function setRiskDate($risk_date)
    {
        $this->container['risk_date'] = $risk_date;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets instance_overdue_percentage
     * @return double
     */
    public function getInstanceOverduePercentage()
    {
        return $this->container['instance_overdue_percentage'];
    }

    /**
     * Sets instance_overdue_percentage
     * @param double $instance_overdue_percentage
     * @return $this
     */
    public function setInstanceOverduePercentage($instance_overdue_percentage)
    {
        $this->container['instance_overdue_percentage'] = $instance_overdue_percentage;

        return $this;
    }

    /**
     * Gets data
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param string $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param string $content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ProcessMaker\PMIO\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ProcessMaker\PMIO\ObjectSerializer::sanitizeForSerialization($this));
    }
}


